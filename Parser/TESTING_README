TESTING
-------

SST (Simple String Table)
-------------------------

The SST (constructed as part of the "Saving a little space" part of the assignment) is put to the test in sst_tester.c. In order to execute this test, run "make sst_tester" and then execute the sst_tester program that is compiled. This test program ensures that pointers to identical strings that are added to an SST point to the same memory location. Additionally, it tests the creation, expansion, and destruction of the SST.

Parser
------

All of the Parser testing can be found within the /testing subdirectory, which contains Parser testing input and output files, as well as a convenient run script.

+ complicated_expressions.c57.in provides sample code that tests the Parser's ability to correctly parse complicated and mixed variable declarations, as well as complex array subscripting and variable assignment.

+ loops_within_loops.c57.in tests the Parser's ability to correctly deal with nested loops, if-statements, and dangling elses. We have manually checked the output to ensure that elses are properly matched and loops are correctly nested.

+ bellman-ford.c57.in and dijkstra.c57.in are longer programs that provide practical examples of C57 code. Including these inputs in the testing suite ensures that our Parser can correctly handle programs with many interweaving components. I.e. using actual code could potentially demonstrate errors that are not apparent when testing different dimensions of the Parser in isolation.

The bash script /testing/run_all_tests.sh (which must be executed from within /testing) provides a convenient way to run the Parser on these four test files and store the output in corresponding *.out files for manual checking.

Happy testing,
Jake & Derek