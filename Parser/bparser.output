Terminals which are not used

   BADTOKEN


State 40 conflicts: 1 shift/reduce
State 41 conflicts: 1 shift/reduce


Grammar

    0 $accept: code $end

    1 code: stmtList

    2 stmtList: /* empty */
    3         | stmtList stmt

    4 stmt: exprStmt
    5     | compoundStmt
    6     | ifStmt

    7 exprStmt: expr ';'
    8         | ';'
    9         | error ';'

   10 compoundStmt: '{' stmtList '}'

   11 ifStmt: IF '(' expr ')' stmt
   12       | IF '(' expr ')' stmt ELSE stmt
   13       | IF '(' error ')' stmt
   14       | IF '(' error ')' stmt ELSE stmt

   15 @1: /* empty */

   16 expr: IDENT @1 '=' expr
   17     | expr '+' expr
   18     | expr '-' expr
   19     | expr '*' expr
   20     | '-' expr
   21     | '(' expr ')'
   22     | NUM
   23     | IDENT
   24     | '(' error ')'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 11 12 13 14 21 24
')' (41) 11 12 13 14 21 24
'*' (42) 19
'+' (43) 17
'-' (45) 18 20
';' (59) 7 8 9
'=' (61) 16
'{' (123) 10
'}' (125) 10
error (256) 9 13 14 24
NUM (258) 22
IDENT (259) 16 23
BADTOKEN (260)
IF (261) 11 12 13 14
ELSE (262) 12 14
UMINUS (263)


Nonterminals, with rules where they appear

$accept (18)
    on left: 0
code (19)
    on left: 1, on right: 0
stmtList (20)
    on left: 2 3, on right: 1 3 10
stmt (21)
    on left: 4 5 6, on right: 3 11 12 13 14
exprStmt (22)
    on left: 7 8 9, on right: 4
compoundStmt (23)
    on left: 10, on right: 5
ifStmt (24)
    on left: 11 12 13 14, on right: 6
expr (25)
    on left: 16 17 18 19 20 21 22 23 24, on right: 7 11 12 16 17 18
    19 20 21
@1 (26)
    on left: 15, on right: 16


state 0

    0 $accept: . code $end

    $default  reduce using rule 2 (stmtList)

    code      go to state 1
    stmtList  go to state 2


state 1

    0 $accept: code . $end

    $end  shift, and go to state 3


state 2

    1 code: stmtList .
    3 stmtList: stmtList . stmt

    error  shift, and go to state 4
    NUM    shift, and go to state 5
    IDENT  shift, and go to state 6
    IF     shift, and go to state 7
    '-'    shift, and go to state 8
    ';'    shift, and go to state 9
    '{'    shift, and go to state 10
    '('    shift, and go to state 11

    $end  reduce using rule 1 (code)

    stmt          go to state 12
    exprStmt      go to state 13
    compoundStmt  go to state 14
    ifStmt        go to state 15
    expr          go to state 16


state 3

    0 $accept: code $end .

    $default  accept


state 4

    9 exprStmt: error . ';'

    ';'  shift, and go to state 17


state 5

   22 expr: NUM .

    $default  reduce using rule 22 (expr)


state 6

   16 expr: IDENT . @1 '=' expr
   23     | IDENT .

    '='       reduce using rule 15 (@1)
    $default  reduce using rule 23 (expr)

    @1  go to state 18


state 7

   11 ifStmt: IF . '(' expr ')' stmt
   12       | IF . '(' expr ')' stmt ELSE stmt
   13       | IF . '(' error ')' stmt
   14       | IF . '(' error ')' stmt ELSE stmt

    '('  shift, and go to state 19


state 8

   20 expr: '-' . expr

    NUM    shift, and go to state 5
    IDENT  shift, and go to state 6
    '-'    shift, and go to state 8
    '('    shift, and go to state 11

    expr  go to state 20


state 9

    8 exprStmt: ';' .

    $default  reduce using rule 8 (exprStmt)


state 10

   10 compoundStmt: '{' . stmtList '}'

    $default  reduce using rule 2 (stmtList)

    stmtList  go to state 21


state 11

   21 expr: '(' . expr ')'
   24     | '(' . error ')'

    error  shift, and go to state 22
    NUM    shift, and go to state 5
    IDENT  shift, and go to state 6
    '-'    shift, and go to state 8
    '('    shift, and go to state 11

    expr  go to state 23


state 12

    3 stmtList: stmtList stmt .

    $default  reduce using rule 3 (stmtList)


state 13

    4 stmt: exprStmt .

    $default  reduce using rule 4 (stmt)


state 14

    5 stmt: compoundStmt .

    $default  reduce using rule 5 (stmt)


state 15

    6 stmt: ifStmt .

    $default  reduce using rule 6 (stmt)


state 16

    7 exprStmt: expr . ';'
   17 expr: expr . '+' expr
   18     | expr . '-' expr
   19     | expr . '*' expr

    '+'  shift, and go to state 24
    '-'  shift, and go to state 25
    '*'  shift, and go to state 26
    ';'  shift, and go to state 27


state 17

    9 exprStmt: error ';' .

    $default  reduce using rule 9 (exprStmt)


state 18

   16 expr: IDENT @1 . '=' expr

    '='  shift, and go to state 28


state 19

   11 ifStmt: IF '(' . expr ')' stmt
   12       | IF '(' . expr ')' stmt ELSE stmt
   13       | IF '(' . error ')' stmt
   14       | IF '(' . error ')' stmt ELSE stmt

    error  shift, and go to state 29
    NUM    shift, and go to state 5
    IDENT  shift, and go to state 6
    '-'    shift, and go to state 8
    '('    shift, and go to state 11

    expr  go to state 30


state 20

   17 expr: expr . '+' expr
   18     | expr . '-' expr
   19     | expr . '*' expr
   20     | '-' expr .

    $default  reduce using rule 20 (expr)


state 21

    3 stmtList: stmtList . stmt
   10 compoundStmt: '{' stmtList . '}'

    error  shift, and go to state 4
    NUM    shift, and go to state 5
    IDENT  shift, and go to state 6
    IF     shift, and go to state 7
    '-'    shift, and go to state 8
    ';'    shift, and go to state 9
    '{'    shift, and go to state 10
    '}'    shift, and go to state 31
    '('    shift, and go to state 11

    stmt          go to state 12
    exprStmt      go to state 13
    compoundStmt  go to state 14
    ifStmt        go to state 15
    expr          go to state 16


state 22

   24 expr: '(' error . ')'

    ')'  shift, and go to state 32


state 23

   17 expr: expr . '+' expr
   18     | expr . '-' expr
   19     | expr . '*' expr
   21     | '(' expr . ')'

    '+'  shift, and go to state 24
    '-'  shift, and go to state 25
    '*'  shift, and go to state 26
    ')'  shift, and go to state 33


state 24

   17 expr: expr '+' . expr

    NUM    shift, and go to state 5
    IDENT  shift, and go to state 6
    '-'    shift, and go to state 8
    '('    shift, and go to state 11

    expr  go to state 34


state 25

   18 expr: expr '-' . expr

    NUM    shift, and go to state 5
    IDENT  shift, and go to state 6
    '-'    shift, and go to state 8
    '('    shift, and go to state 11

    expr  go to state 35


state 26

   19 expr: expr '*' . expr

    NUM    shift, and go to state 5
    IDENT  shift, and go to state 6
    '-'    shift, and go to state 8
    '('    shift, and go to state 11

    expr  go to state 36


state 27

    7 exprStmt: expr ';' .

    $default  reduce using rule 7 (exprStmt)


state 28

   16 expr: IDENT @1 '=' . expr

    NUM    shift, and go to state 5
    IDENT  shift, and go to state 6
    '-'    shift, and go to state 8
    '('    shift, and go to state 11

    expr  go to state 37


state 29

   13 ifStmt: IF '(' error . ')' stmt
   14       | IF '(' error . ')' stmt ELSE stmt

    ')'  shift, and go to state 38


state 30

   11 ifStmt: IF '(' expr . ')' stmt
   12       | IF '(' expr . ')' stmt ELSE stmt
   17 expr: expr . '+' expr
   18     | expr . '-' expr
   19     | expr . '*' expr

    '+'  shift, and go to state 24
    '-'  shift, and go to state 25
    '*'  shift, and go to state 26
    ')'  shift, and go to state 39


state 31

   10 compoundStmt: '{' stmtList '}' .

    $default  reduce using rule 10 (compoundStmt)


state 32

   24 expr: '(' error ')' .

    $default  reduce using rule 24 (expr)


state 33

   21 expr: '(' expr ')' .

    $default  reduce using rule 21 (expr)


state 34

   17 expr: expr . '+' expr
   17     | expr '+' expr .
   18     | expr . '-' expr
   19     | expr . '*' expr

    '*'  shift, and go to state 26

    $default  reduce using rule 17 (expr)


state 35

   17 expr: expr . '+' expr
   18     | expr . '-' expr
   18     | expr '-' expr .
   19     | expr . '*' expr

    '*'  shift, and go to state 26

    $default  reduce using rule 18 (expr)


state 36

   17 expr: expr . '+' expr
   18     | expr . '-' expr
   19     | expr . '*' expr
   19     | expr '*' expr .

    $default  reduce using rule 19 (expr)


state 37

   16 expr: IDENT @1 '=' expr .
   17     | expr . '+' expr
   18     | expr . '-' expr
   19     | expr . '*' expr

    '+'  shift, and go to state 24
    '-'  shift, and go to state 25
    '*'  shift, and go to state 26

    $default  reduce using rule 16 (expr)


state 38

   13 ifStmt: IF '(' error ')' . stmt
   14       | IF '(' error ')' . stmt ELSE stmt

    error  shift, and go to state 4
    NUM    shift, and go to state 5
    IDENT  shift, and go to state 6
    IF     shift, and go to state 7
    '-'    shift, and go to state 8
    ';'    shift, and go to state 9
    '{'    shift, and go to state 10
    '('    shift, and go to state 11

    stmt          go to state 40
    exprStmt      go to state 13
    compoundStmt  go to state 14
    ifStmt        go to state 15
    expr          go to state 16


state 39

   11 ifStmt: IF '(' expr ')' . stmt
   12       | IF '(' expr ')' . stmt ELSE stmt

    error  shift, and go to state 4
    NUM    shift, and go to state 5
    IDENT  shift, and go to state 6
    IF     shift, and go to state 7
    '-'    shift, and go to state 8
    ';'    shift, and go to state 9
    '{'    shift, and go to state 10
    '('    shift, and go to state 11

    stmt          go to state 41
    exprStmt      go to state 13
    compoundStmt  go to state 14
    ifStmt        go to state 15
    expr          go to state 16


state 40

   13 ifStmt: IF '(' error ')' stmt .
   14       | IF '(' error ')' stmt . ELSE stmt

    ELSE  shift, and go to state 42

    ELSE      [reduce using rule 13 (ifStmt)]
    $default  reduce using rule 13 (ifStmt)


state 41

   11 ifStmt: IF '(' expr ')' stmt .
   12       | IF '(' expr ')' stmt . ELSE stmt

    ELSE  shift, and go to state 43

    ELSE      [reduce using rule 11 (ifStmt)]
    $default  reduce using rule 11 (ifStmt)


state 42

   14 ifStmt: IF '(' error ')' stmt ELSE . stmt

    error  shift, and go to state 4
    NUM    shift, and go to state 5
    IDENT  shift, and go to state 6
    IF     shift, and go to state 7
    '-'    shift, and go to state 8
    ';'    shift, and go to state 9
    '{'    shift, and go to state 10
    '('    shift, and go to state 11

    stmt          go to state 44
    exprStmt      go to state 13
    compoundStmt  go to state 14
    ifStmt        go to state 15
    expr          go to state 16


state 43

   12 ifStmt: IF '(' expr ')' stmt ELSE . stmt

    error  shift, and go to state 4
    NUM    shift, and go to state 5
    IDENT  shift, and go to state 6
    IF     shift, and go to state 7
    '-'    shift, and go to state 8
    ';'    shift, and go to state 9
    '{'    shift, and go to state 10
    '('    shift, and go to state 11

    stmt          go to state 45
    exprStmt      go to state 13
    compoundStmt  go to state 14
    ifStmt        go to state 15
    expr          go to state 16


state 44

   14 ifStmt: IF '(' error ')' stmt ELSE stmt .

    $default  reduce using rule 14 (ifStmt)


state 45

   12 ifStmt: IF '(' expr ')' stmt ELSE stmt .

    $default  reduce using rule 12 (ifStmt)
