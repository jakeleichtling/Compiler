TESTING README
--------------

Our approach to testing the Semantic Routines is threefold. First, we created a handful of files to demonstrate the functionality of every core element. With the fundemental elements in place, we ran the provided Dijkstra and Bellman-Ford algorithms to ensure that the operations worked together. Those algorithms were also augmented by merge_sort.c57 to test recursive functionality. Finally, we created several tests for the most important error cases. Please see the ERROR_TESTING_README for mroe on error testing.

You can quickly compile all the tests by executing ./run_all_tests.sh. If you wish to see some of the information we used while debugging the compiler, compile a program with ./djcc -d input_file_name.c57 output_file_name.tm57.

Below you will find an enumeration of what functionality is tested in each file.

Cheers,
Derek and Jake
--------------

Note: The first line number(s) indicate where the feature is tested in a relatively isolated and contrived environment. The file and line number following the semicolon to a more realistic use case of the feature.

In decl_test.c57:
	-ids with letters, digits, and underscores (20-22; merge_sort.c57: 17-21)
	-multiple declarations within a program (20-22, merge_sort.c57: 17-21)
	-multiple variables in one declaration (27; merge_sort.c57: 20)
	-int declared (22; merge_sort.c57: 17-19)
	-double declared (20; dijkstra.c57: 22)
	-declaration with initialization (64; merge_sort.c57: 17-19)
	-declaration of an array
		-constant size (30; merge_sort.c57: 13)
		-variable size (40; merge_sort.c57: 20)
		-size that is an array element (47; test_array_decl.c57)
	-global variables
		-before any function (20-30; merge_sort.c57: 12-13)
		-between functions (60; merge_sort.c57: 66-67)
	-local variables (64-65; merge_sort.c57: 17-21)
	-redifinition of variables in inner scope (34, 49; merge_sort.c57: 15)

In function_call_test.c57:
	-Parameters
		-int (47)
		-double (61)
		-array of int (47)
		-array of double (78)
	-Function declaration (47)
	-Function with void param (103)
	-Function with empty parens (109)
	-Function with multiple params (47)
	-Function with array param (47)
	-Function returning
		-void (47)
		-int (78)
		-double (61)
	-Actual parameters that are
		-Global arrays (140)
		-Local arrays (136)
		-Formal array parameters (97)
	-Function call with no args (143)
	-Function call with multiple args (136)
	-Function call with array parameter (136)
	-Function call in the midst of an expression (146)
	-Return with value (72)
	-Return without value (104)
	-Return in the middle of a function (109)

In misc_test.c57:
	-If-then (50)
	-If-then-else (57)
		-Nested (65)
	-While (72)
	-Do-While (82)
	-For-loop (92)
		-With empty header parts (100)
	-Read (107)
	-Print expression (38)
	-Print string (35)
	-Assignment into unsubscripted var (73)
	-Assignment into subscripted var (32)

In op_test.c57:
	-binary +
		-int (66; merge_sort.c57: 71, 75, 79)
		-double (174; dijkstra.c57: 127)
	-binary –
		-int (72; dijkstra.c57: 95)
		-double (180; merge_sort.c57: 72)
	-binary *
		-int (78; dijkstra.c57: 16)
		-double (186; merge_sort.c57: 72)
	-binary /
		-int (84; dijkstra.c57: 6)
		-double (192; merge_sort.c57: 72)
	-binary % (int only) (90)
	-binary <
		-int (96; dijkstra.c57: 60)
		-double (198; dijkstra.c57: 70)
	-binary <=
		-int (102; dijkstra.c57: 138)
		-double (204; )
	-binary >
		-int (108; dijkstra.c57: 104)
		-double (210; dijkstra.c57: 104)
	-binary >=
		-int (114)
		-double (216; merge_sort.c57: 46)
	-binary ==
		-int (120)
		-double (222)
	-binary !=
		-int (126)
		-double (228)
	-binary && (132; merge_sort.c57: 41)
	-binary || (138)
	-unary ! (144)
	-unary – (150)
	-int (58; bellman-ford.c57: 5)
	-double (59; bellman-ford.c57: 5)
	-prefix ++ (157; merge_sort.c57: 30)
	-prefix –– (164; dijkstra.c57: 87)
	-convert int to double (244; merge_sort.c57: 72, 76, 80);
	-NUM (66; merge_sort.c57: 72)
	-FNUM (174; merge_sort.c57: 76)

In merge_sort.c57
	-Recursive function (27-28)
